@host = 192.168.1.31
@port = 3443
@uri = https://{{host}}:{{port}}/graphql
@contentType = application/json
@requestType = GraphQL

@personUsernameJohn = johndoe
@personIdJohn = 4ea88521-031b-4279-9165-9c10e1839002
@personIdJane = 4ea88521-031b-4279-9165-9c10e1839002
@personId = b2756e4d-0b69-49cd-a446-64c884e01f9e
@transferAssetId = 54a89a14-8b6e-47e6-bb01-f4a80aa627e9
@causeId = acef70e5-cd25-4533-8392-9fa57e43cf13
@participantIdGov = c8ca045c-9d1b-407f-b9ae-31711758f2d0

### mutation: personLogin

// @name personLogin
POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
X-REQUEST-TYPE: {{requestType}}

mutation personLogin($loginPersonData: LoginPersonInput!) {
	personLogin(loginPersonData: $loginPersonData) {
		accessToken
		user {
			id
			username
			email
			roles
		}
	}
}

{
	"loginPersonData": {
		"username": "johndoe",
		"password": "Aa456#45"
	}
}

### query: participants

@authToken = {{personLogin.response.body.$.data.personLogin.accessToken}}

// @name participants
POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

query participants($skip: Int, $take: Int) {
  participants(skip: $skip, take: $take) {
    id
    code
    name
    email
    ambassadors
    msp
    participant {
      id
      name
      msp
    }
    # balance
    fundsBalance {
      debit
      credit
      balance
    }
    volunteeringHoursBalance {
      debit
      credit
      balance
    }
    goodsStock {
      id
      code
      barCode
      name
      description
      tags
      balance{
        debit
        credit
        balance
      }
      metaData
      metaDataInternal
      createdDate
      createdByPersonId        
    }    
    createdDate   
    createdByPersonId
    metaData
    metaDataInternal    
  }
}

{
	"skip": 0,
	"take": 10
}

### query: participantsComplexQuery

// @name participantsComplexQuery
@createdDate = 1594852734392

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

query participantComplexQuery($getByComplexQueryInput: GetByComplexQueryInput!, $skip: Int, $take: Int) {
  participantComplexQuery(getByComplexQueryInput: $getByComplexQueryInput, skip: $skip, take: $take) {
    id
    name
    ambassadors
    msp
    participant {
      id
      name
      msp
    }
    createdDate   
    createdByPersonId
    metaData
    metaDataInternal    
  }
}

{
	"getByComplexQueryInput": {
		"filter": {
			"name": "Big Government",
			"createdDate": {
				"$lte": {{createdDate}},
				"$gte": {{createdDate}}
			}
		},
		"sort": [
			{
				"name": "asc"
			}
		]
	},
	"skip": 0,
	"take": 10
}

### query: pesons

// @name persons
POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

query persons($skip: Int, $take: Int) {
  persons(skip: $skip, take: $take) {
    id
    username
    email
    roles
    createdDate
    metaData
    metaDataInternal
    mobilePhone
    postal
    city
    region
    geoLocation
    timezone
    personalInfo
    profile
    fundsBalance {
      debit
      credit
      balance
    }
    volunteeringHoursBalance {
      debit
      credit
      balance
    }
    goodsStock {
      id
      code
      barCode
      name
      description
      tags
      balance {
        debit
        credit
        balance
      }
      metaData
      metaDataInternal
      createdDate
      createdByPersonId
    }
    firstname
    lastname
    gender
    height
    fatherFirstname
    fatherLastname
    motherFirstname
    motherLastname
    birthDate
    nationality
    country
    documentNumber
    documentType
    cardVersion
    emissionDate
    expirationDate
    emittingEntity
    identityNumber
    fiscalNumber
    socialSecurityNumber
    beneficiaryNumber
    pan
    requestLocation
    otherInformation
    registrationDate    
  }
}

{
	"skip": 0,
	"take": 50
}

### mutations update: assetUpdate

// @name assetUpdate

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation assetUpdate($updateAssetData: UpdateAssetInput!) {
  assetUpdate(updateAssetData: $updateAssetData) {
    id
    name    
    ambassadors
    tags
    metaData
    metaDataInternal    
  }
}

{
	"updateAssetData": {
		"id": "{{transferAssetId}}",
		"ambassadors": [
			"{{personId}}",
			"{{personIdJane}}",
			"{{personIdJohn}}"
		],
		"tags": [
			"grey",
			"pink",
			"yellow"
		],
		"metaData": {
			"key": "valueUpdatedAgain"
		},
		"metaDataInternal": {
			"key": "valueUpdatedAgain"
		}
	}
}

### mutations update: causeUpdate

// @name causeUpdate
// neo4j: MATCH (n:Cause {id:"acef70e5-cd25-4533-8392-9fa57e43cf13"}) RETURN n.email,n.ambassadors, n.tags, n.metaData, n.metaDataInternal

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation causeUpdate($updateCauseData: UpdateCauseInput!) {
  causeUpdate(updateCauseData: $updateCauseData) {
    id
    name    
    email
    ambassadors
    tags
    metaData
    metaDataInternal    
  }
}

{
	"updateCauseData": {
		"id": "{{causeId}}",
		"email": "updated@example.com",
		"ambassadors": [
			"{{personIdJohn}}",
			"{{personId}}",
			"{{personIdJane}}"
		],
		"tags": [
			"grey",
			"pink",
			"blue",
      "white"
		],
		"metaData": {
			"key": "valueUpdated"
		},
		"metaDataInternal": {
			"key": "valueUpdated"
		}
	}
}

### mutations update: participantUpdate

// @name participantUpdate
// neo4j: 

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation participantUpdate($updateParticipantData: UpdateParticipantInput!) {
  participantUpdate(updateParticipantData: $updateParticipantData) {
    id
    name
    ambassadors
    metaData
    metaDataInternal
  }
}

{
	"updateParticipantData": {
		"id": "{{participantIdGov}}",
		"email": "updated@example.com",
		"ambassadors": [
			"{{personId}}",
			"{{personIdJane}}"
		],
		"metaData": {
			"key": "valueUpdated"
		},
		"metaDataInternal": {
			"key": "valueUpdated"
		}
	}
}

### mutations update: personUpdate

// @name personUpdate
// neo4j: MATCH (n:Person {id:"4ea88521-031b-4279-9165-9c10e1839002"}) RETURN n.roles, n.metaDataInternal

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation personUpdate($updatePersonData: UpdatePersonInput!) {
  personUpdate(updatePersonData: $updatePersonData) {
    id
    roles
    metaDataInternal
  }
}

{
	"updatePersonData": {
		"id": "{{personIdJohn}}",
		"roles": [
			"USER",
			"MANAGER",
			"ADMIN"
		],
		"metaDataInternal": {
			"key": "valueUpdated"
		}
	}
}

### mutations update: personUpdatePassword

// @name personUpdatePassword
// neo4j:

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation personUpdatePassword($updatePersonPasswordData: UpdatePersonPasswordInput!) {
  personUpdatePassword(updatePersonPasswordData: $updatePersonPasswordData) {
    id
    username
  }
}

{
	"updatePersonPasswordData": {
		"id": "{{personId}}",
		"password": "87654321"
	}
}

### mutations update: personUpdateProfile

// @name personUpdateProfile
// neo4j:  MATCH (n:Person {id:"b2756e4d-0b69-49cd-a446-64c884e01f9e"}) RETURN n.id,n.email,n.mobilePhone,n.postal,n.city,n.region,n.geoLocation,n.timezone,n.personalInfo,n.metaData

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation personUpdateProfile($updatePersonProfileData: UpdatePersonProfileInput!) {
  personUpdateProfile(updatePersonProfileData: $updatePersonProfileData) {
    id
    username
    email
    mobilePhone
    postal
    city
    region
    geoLocation
    timezone
    personalInfo
    metaData
  }
}

{
	"updatePersonProfileData": {
		"id": "{{personId}}",
		"email": "emailUpdated2@example.com",
		"mobilePhone": "mobilePhoneUpdated2",
		"postal": "postalUpdated",
		"city": "cityUpdated",
		"region": "regionUpdated",
		"geoLocation": "geoLocationUpdated",
		"timezone": "timezoneUpdated",
		"personalInfo": "personalInfoUpdated",
		"metaData": {
			"key": "metaDataUpdated"
		}
	}
}

### mutations update: personUpsertCitizenCard

// @name personUpsertCitizenCard
// neo4j: MATCH (n:Person {id:"6ea988b0-13ae-4b2e-9f39-32710276dc37"}) RETURN n.firstname, n.lastname, n.gender, n.height, n.fatherFirstname, n.fatherLastname, n.motherFirstname, n.motherLastname, n.birthDate, n.nationality, n.country, n.documentNumber, n.documentType, n.cardVersion, n.emissionDate, n.expirationDate, n.emittingEntity, n.identityNumber, n.fiscalNumber, n.socialSecurityNumber, n.beneficiaryNumber, n.pan, n.requestLocation, n.otherInformation

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation personUpsertCitizenCard($upsertCitizenCardData: UpsertCitizenCardInput!) {
  personUpsertCitizenCard(upsertCitizenCardData: $upsertCitizenCardData) {
    id
    fiscalNumber
    identityNumber
    socialSecurityNumber
    beneficiaryNumber
    documentNumber
    pan
    firstname
    lastname
    gender
    height
    fatherFirstname
    fatherLastname
    motherFirstname
    motherLastname
    birthDate
    nationality
    country
    documentType
    cardVersion
    emissionDate
    expirationDate
    emittingEntity
    requestLocation
    otherInformation
  }
}

{
	"upsertCitizenCardData": {
		"fiscalNumber": "182692158",
		"identityNumber": "098794628",
		"socialSecurityNumber": "11103478248",
		"beneficiaryNumber": "285191668",
		"documentNumber": "09879462 0 ZZ8",
		"pan": "0000036014662668",
		"firstname": "Jonilso",
		"lastname": "Doe",
		"gender": "M",
		"height": 1.92,
		"fatherFirstname": "Alberto",
		"fatherLastname": "De Andrade Monteiro",
		"motherFirstname": "Maria Da Graça De Oliveira Mendes",
		"motherLastname": "Monteiro",
		"birthDate": "1970-01-01T17:13:05.472Z",
		"nationality": "PRT",
		"country": "PRT",
		"documentType": "Cartão De Cidadão",
		"cardVersion": "006.007.23",
		"emissionDate": "1970-01-01T17:13:05.472Z",
		"expirationDate": "1970-01-01T17:13:05.472Z",
		"emittingEntity": "República Portuguesa",
		"requestLocation": "CRCiv. Figueira da Foz.",
		"otherInformation": "some random info joe"
	}
}

### mutations update: personAddAttribute

// @name personAddAttribute
// neo4j: MATCH (n:Person) WHERE n.id = "4cc27daf-d297-465c-a12e-03c330d8075f" RETURN n.attributes

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation personAddAttribute($personId: String!, $addPersonAttributeData: AddPersonAttributeInput!) {
  personAddAttribute(personId: $personId, addPersonAttributeData: $addPersonAttributeData) {   
      id
      username
      email
      attributes {
        id
        content
        issuedDate
        expiresDate
        expired
        certifierID
      }
  }
}

{
	"personId": "{{personId}}",
	"addPersonAttributeData": {
		"id": "awakening-year",
		"content": {
			"data": "1971",
			"work": true
		},
		"issuedDate": 1554239270,
		"certifierID": "{{participantIdGov}}"
	}
}


### mutations update: transactionUpdate

// @name transactionUpdate
// neo4j: MATCH (n:Transaction) WHERE n.id = "00a0c900-f29d-4afe-a5d5-64f29b1adc32" RETURN n.metaDataInternal

POST {{uri}} HTTP/1.1
Content-Type: {{contentType}}
Authorization: Bearer {{authToken}}
X-REQUEST-TYPE: {{requestType}}

mutation transactionUpdate($updateTransactionData: UpdateTransactionInput!) {
  transactionUpdate(updateTransactionData: $updateTransactionData) {
    id
    transactionType
    resourceType
    metaDataInternal
  }
}

{
	"updateTransactionData": {
		"id": "2836e047-4dbe-4f39-abdc-b3801c1bddc3",
		"metaDataInternal": {
			"key": "updated internal value"
		}
	}
}

### subscriptions to be used in graphql playground

subscription personLogged{
  personLogged
}

subscription assetAdded {
  assetAdded {
    id
  }
}

subscription assetUpdated {
  assetUpdated {
    id
  }
}

subscription causeAdded {
  causeAdded {
    id
  }
}

subscription causeUpdated {
  causeUpdated {
    id
  }
}

subscription participantAdded {
  participantAdded {
    id
  }
}

subscription participantUpdated {
  participantUpdated {
    id
  }
}

subscription participantIdentityChanged {
  participantIdentityChanged {
    id
  }
}

subscription personAdded {
  personAdded {
    id
  }
}

subscription personUpdated {
  personUpdated {
    id
  }
}

subscription personPasswordUpdated {
  personPasswordUpdated {
    id
  }
}

subscription personProfileUpdated {
  personProfileUpdated {
    id
  }
}

subscription personCitizenCardUpserted {
  personCitizenCardUpserted {
    id
  }
}

subscription personAttributeAdded {
  personAttributeAdded {
    id
  }
}

subscription transactionAdded {
  transactionAdded {
    id
  }
}

subscription transactionUpdated {
  transactionUpdated {
    id
  }
}

