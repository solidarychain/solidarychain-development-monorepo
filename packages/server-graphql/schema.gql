# -----------------------------------------------
# !!! THIS FILE WAS GENERATED BY TYPE-GRAPHQL !!!
# !!!   DO NOT MODIFY THIS FILE BY YOURSELF   !!!
# -----------------------------------------------

type AccessToken {
  accessToken: String!
}

input AddPersonAttributeInput {
  id: ID!
  content: JSONObject
  issuedDate: Float
  expiresDate: Date
  expired: Boolean
  certifierID: String
}

type Asset {
  id: ID!
  name: String!
  assetType: String!
  owner: EntityResult!
  location: String
  tags: [String!]
  metaData: JSONObject
  metaDataInternal: JSONObject
  participant: Participant!
  identities: [x509Identities!]!
  createdDate: Float!
}

type Attribute {
  id: ID!
  content: JSONObject
  issuedDate: Float
  expiresDate: Date
  expired: Boolean
  certifierID: String
}

type Cause {
  id: ID!
  name: String!
  startDate: Float
  endDate: Float
  location: String
  tags: [String!]
  metaData: JSONObject
  metaDataInternal: JSONObject
  input: EntityResult!
  participant: Participant!
  identities: [x509Identities!]!
  createdDate: Float!
}

"""Date custom scalar type"""
scalar Date

type Entity {
  id: ID!
  type: String!
  createdDate: Float!
  identities: [x509Identities!]!
}

type EntityResult {
  entity: Entity!
}

input GetByAttributeInput {
  id: String!
  content: JSONObject
}

input GetByComplexQueryInput {
  filter: JSONObject!
  fields: [String!]
  sort: [JSONObject!]
}

"""
The `JSONObject` scalar type represents JSON objects as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSONObject

input LoginPersonInput {
  username: String!
  password: String!
}

type Mutation {
  personLogin(loginPersonData: LoginPersonInput!): PersonLoginResponse!
  personLogout: Boolean!
  revokeUserRefreshTokens(username: String!): Boolean!
  causeNew(newCauseData: NewCauseInput!): Cause!
  participantNew(newParticipantData: NewParticipantInput!): Participant!
  personNew(newPersonData: NewPersonInput!): Person!
  personAddAttribute(addPersonAttributeData: AddPersonAttributeInput!, personId: String!): Person!
  transactionNew(newTransactionData: NewTransactionInput!): Transaction!
  assetNew(newAssetData: NewAssetInput!): Asset!
}

input NewAssetInput {
  id: String
  name: String!
  assetType: String!
  owner: JSONObject!
  location: String
  tags: [String!]
  metaData: JSONObject
  metaDataInternal: JSONObject
}

input NewCauseInput {
  id: String
  name: String!
  startDate: Date
  endDate: Date
  location: String
  tags: [String!]
  metaData: JSONObject
  metaDataInternal: JSONObject
  input: JSONObject!
}

input NewParticipantInput {
  id: String
  code: String!
  name: String!
}

input NewPersonInput {
  id: String
  username: String
  password: String
  email: String
  mobilePhone: Float
  postal: String
  city: String
  region: String
  geoLocation: String
  timezone: String
  personalInfo: String
  internalInfo: String
  profile: JSONObject
  firstname: String
  lastname: String
  gender: String
  height: Float
  fatherFirstname: String
  fatherLastname: String
  motherFirstname: String
  motherLastname: String
  birthDate: Date
  nationality: String
  country: String
  documentNumber: String
  documentType: String
  cardVersion: String
  emissionDate: Date
  expirationDate: Date
  emittingEntity: String
  identityNumber: String
  fiscalNumber: String!
  socialSecurityNumber: String
  beneficiaryNumber: String
  pan: String
  requestLocation: String
  otherInformation: String
}

input NewTransactionInput {
  id: String
  transactionType: String!
  resourceType: String!
  input: JSONObject!
  output: JSONObject!
  quantity: Float
  currency: String
  location: String
  tags: [String!]
  metaData: JSONObject
  metaDataInternal: JSONObject
  assetId: String
  ownerUsername: String
}

type Participant {
  id: ID!
  code: String!
  name: String!
  msp: String!
  participant: Participant
  identities: [x509Identities!]!
  createdDate: Float!
}

type Person {
  id: ID!
  username: String
  email: String
  attributes: [Attribute!]
  roles: [String!]
  participant: Participant!
  identities: [x509Identities!]!
  createdDate: Float!
  registrationDate: Date!
  mobilePhone: Float
  postal: String
  city: String
  region: String
  geoLocation: String
  timezone: String
  personalInfo: String
  internalInfo: String
  profile: JSONObject
  firstname: String
  lastname: String
  gender: String
  height: Float
  fatherFirstname: String
  fatherLastname: String
  motherFirstname: String
  motherLastname: String
  birthDate: Date
  nationality: String
  country: String
  documentNumber: String
  documentType: String
  cardVersion: String
  emissionDate: Date
  expirationDate: Date
  emittingEntity: String
  identityNumber: String
  fiscalNumber: String!
  socialSecurityNumber: String
  beneficiaryNumber: String
  pan: String
  requestLocation: String
  otherInformation: String
}

type PersonLoginResponse {
  user: Person!
  accessToken: String!
}

type Query {
  causes(skip: Int = 0, take: Int = 25): [Cause!]!
  causeOngoing(skip: Int = 0, take: Int = 25, date: Float!): [Cause!]!
  causeComplexQuery(skip: Int = 0, take: Int = 25, getByComplexQueryInput: GetByComplexQueryInput!): [Cause!]!
  causeById(id: String!): Cause!
  participants(skip: Int = 0, take: Int = 25): [Participant!]!
  participantComplexQuery(skip: Int = 0, take: Int = 25, getByComplexQueryInput: GetByComplexQueryInput!): [Participant!]!
  participantById(id: String!): Participant!
  participantByCode(code: String!): Participant!
  persons(skip: Int = 0, take: Int = 25): [Person!]!
  personByAttribute(skip: Int = 0, take: Int = 25, getByAttributeInput: GetByAttributeInput!): [Person!]!
  personComplexQuery(skip: Int = 0, take: Int = 25, getByComplexQueryInput: GetByComplexQueryInput!): [Person!]!
  personById(id: String!): Person!
  personByUsername(username: String!): Person!
  personByFiscalnumber(fiscalNumber: String!): Person!
  personProfile: Person!
  transactions(skip: Int = 0, take: Int = 25): [Transaction!]!
  transactionComplexQuery(skip: Int = 0, take: Int = 25, getByComplexQueryInput: GetByComplexQueryInput!): [Transaction!]!
  transactionById(id: String!): Transaction!
  assets(skip: Int = 0, take: Int = 25): [Asset!]!
  assetComplexQuery(skip: Int = 0, take: Int = 25, getByComplexQueryInput: GetByComplexQueryInput!): [Asset!]!
  assetById(id: String!): Asset!
}

type Subscription {
  personLogged: String!
  causeAdded: Cause!
  participantAdded: Participant!
  personAdded: Person!
  transactionAdded: Transaction!
  assetAdded: Asset!
}

type Transaction {
  id: ID!
  transactionType: String!
  resourceType: String!
  input: EntityResult!
  output: EntityResult!
  quantity: Float
  currency: String
  location: String
  tags: [String!]
  metaData: JSONObject
  metaDataInternal: JSONObject
  participant: Participant
  identities: [x509Identities!]
  createdDate: Float!
  assetId: String
  ownerUsername: String
}

type x509Identities {
  id: ID
  status: Boolean!
  fingerprint: String!
}
